<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <AssemblyName>RimAI.Core</AssemblyName>
    <RootNamespace>RimAI.Core</RootNamespace>
    <LangVersion>latest</LangVersion>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <OutputPath>Assemblies/</OutputPath>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <ItemGroup>
    <!-- RimWorld and other references via NuGet packages -->
    <PackageReference Include="Krafs.Rimworld.Ref" Version="1.6.4518" />
    <PackageReference Include="Lib.Harmony" Version="2.3.3" PrivateAssets="all" />
    <!-- Use Newtonsoft.Json for JSON handling -->
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <!-- Reference to RimAI Framework -->
  <ItemGroup>
    <!-- Use ProjectReference when both projects are in the same solution -->
    <ProjectReference Include="..\..\Rimworld_AI_Framework\RimAI.Framework\RimAI.Framework.csproj" Condition="Exists('..\..\Rimworld_AI_Framework\RimAI.Framework\RimAI.Framework.csproj')">
      <Private>false</Private>
    </ProjectReference>
    
    <!-- Use DLL reference for standalone development -->
    <Reference Include="RimAI.Framework" Condition="!Exists('..\..\Rimworld_AI_Framework\RimAI.Framework\RimAI.Framework.csproj')">
      <HintPath>..\..\Rimworld_AI_Framework\RimAI.Framework\Assemblies\RimAI.Framework.dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <!-- 
    Post-Build Event: A robust, explicit process to deploy the mod.
  -->
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <PropertyGroup>
      <!-- Cross-platform RimWorld directory detection -->
      <!-- Windows (Steam) -->
      <RimWorldDir Condition="$([MSBuild]::IsOSPlatform('Windows'))">C:\Program Files (x86)\Steam\steamapps\common\RimWorld</RimWorldDir>
      <!-- macOS (Steam) -->
      <RimWorldDir Condition="$([MSBuild]::IsOSPlatform('OSX'))">$(HOME)/Library/Application Support/Steam/steamapps/common/RimWorld/RimWorldMac.app/</RimWorldDir>
      <!-- Linux (Steam) -->
      <RimWorldDir Condition="$([MSBuild]::IsOSPlatform('Linux'))">$(HOME)/.steam/steam/steamapps/common/RimWorld</RimWorldDir>
      
      <!-- Fallback: Allow manual override via environment variable -->
      <RimWorldDir Condition="'$(RIMWORLD_DIR)' != ''">$(RIMWORLD_DIR)</RimWorldDir>
      
      <ModDir>$(RimWorldDir)/Mods/RimAI_Core</ModDir>
    </PropertyGroup>

    <!-- Step 1: Clean the destination directory to prevent stale files. -->
    <Message Text="Step 1: Cleaning destination directory: $(ModDir)" Importance="high" />
    <RemoveDir Directories="$(ModDir)" />

    <!-- Step 2: Explicitly copy each required folder and file. -->
    <Message Text="Step 2: Copying static mod assets..." Importance="high" />

    <!-- Copy the About folder -->
    <ItemGroup>
      <AboutFiles Include="About\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(AboutFiles)" DestinationFolder="$(ModDir)\About\%(RecursiveDir)" />

    <!-- Copy the Defs folder -->
    <ItemGroup>
      <DefFiles Include="Defs\**\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(DefFiles)" DestinationFolder="$(ModDir)\Defs\%(RecursiveDir)" />

    <!-- Copy the loadFolders.xml file -->
    <Copy SourceFiles="loadFolders.xml" DestinationFolder="$(ModDir)" />

    <!-- Step 3: Copy the compiled assembly to the correct versioned folder. -->
    <Message Text="Step 3: Copying compiled DLL to $(ModDir)\1.6\Assemblies" Importance="high" />
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(ModDir)\1.6\Assemblies" />
    <Copy SourceFiles="$(ProjectDir)$(OutDir)$(AssemblyName).pdb" DestinationFolder="$(ModDir)\1.6\Assemblies" Condition="Exists('$(ProjectDir)$(OutDir)$(AssemblyName).pdb')" />

    <Message Text="RimAI Core successfully deployed!" Importance="high" />
  </Target>

</Project>
